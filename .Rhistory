plot(tst$Lambda_true[,1])
dat_list = list("X"=X,"Y"=Y,"eta_true"=eta_true,"Lambda_true"=Lambda_true,"e_y"=e_y,
"Theta_true"=Theta_true,"xi_true"=xi_true,"nu_true"=nu_true,"e_x"=e_x,
"avg_dose_resp"=avg_dose_resp)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/simulate_data.R', echo=TRUE)
tst = simulate_data(N,D,S,K_true,J_true,std_error_y,std_error_x,real_Y=Y_sample)
plot(tst$Lambda_true[,1])
plot(tst$Y[,1])
plot(tst$Y[,2])
plot(tst$Y[,3])
plot(tst$Y[,3] + tst$avg_dose_resp)
plot(tst$Y[,1] + tst$avg_dose_resp)
tst = simulate_data(N,D,S,K_true,J_true,std_error_y,std_error_x,real_Y=Y_sample, prob_miss = 0.5)
plot(tst$Y[,1] + tst$avg_dose_resp)
plot(tst$Y[,4] + tst$avg_dose_resp)
plot(tst$Y[,10] + tst$avg_dose_resp)
plot(tst$Y[,15] + tst$avg_dose_resp)
plot(tst$Y[,19] + tst$avg_dose_resp)
plot(tst$Y[,20] + tst$avg_dose_resp)
plot(tst$Y[,25] + tst$avg_dose_resp)
N/2
round(N/2)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/simulate_data.R', echo=TRUE)
tst = simulate_data(N,D,S,K_true,J_true,std_error_y,std_error_x,real_Y=Y_sample, prob_miss=0)
plot(tst$Y[,25] + tst$avg_dose_resp)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/simulate_data.R', echo=TRUE)
drdat <- Y_sample
save(drdat, "/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/data/drdat.Rdata")
save(drdat, file= "/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/data/drdat.Rdata")
# TEST (IN RSTUDIO)
library(bs3fa)
data("drdat")
dat=simulate_data(N=200,D=20,S=40,K_true=3,J_true=4,std_error_y=0.1,std_error_x=0.1,
real_Y=drdat,prob_miss=0.5)
remove.packages("bs3fa")
# TEST (IN RSTUDIO)
library(bs3fa)
remove.packages("bs3fa")
## ORIGINALLY ##
# http://web.mit.edu/insong/www/pdf/rpackage_instructions.pdf
# https://stackoverflow.com/questions/46039132/renaming-and-hiding-an-exported-rcpp-function-in-an-r-package
# file.edit('.filename.R')
# library(RcppArmadillo); RcppArmadillo.package.skeleton("bs3fa", example_code=F)
# IN RSTUDIO
library(Rcpp)
library(tools)
setwd("/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa")
remove.packages("bs3fa")
compileAttributes(verbose=TRUE)
package_native_routine_registration_skeleton("/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa")
# IN COMMAND LINE
# IN RSTUDIO
install.packages("/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa_1.0.tar.gz",
repos = NULL, type="source")
# TEST (IN RSTUDIO)
library(bs3fa)
data('drdat')
dat=simulate_data(N=200,D=20,S=40,K=3,J=4,std_error_y=0.1,std_error_x=0.1,
real_Y=drdat,prob_miss=0.5)
X_save = dat$X; dat$X[1,] <- 1*(dat$X[1,]>0); dat$X[4,] <- 1*(dat$X[4,]>0)
test = bs3fa::run_sampler(X=dat$X, Y=dat$Y, K=dat$K+3, J=dat$J+3, nsamps_save=100, burnin=5000,
post_process=T, random_init=F, print_progress=T)
res = test
image(res$Lambda_save[,,1])
image(dat$Lambda_true)
res$Lambda_save[,,1]
plot(res$Lambda_save[,3,1])
plot(res$Lambda_save[,2,1])
plot(res$Lambda_save[,1,1])
plot(res$Lambda_save[,1,1]); lines(dat$Lambda_true[,1])
norm_lam=norm_bycol(res$Lambda_save)
plot(norm_lam[,1,1]); lines(dat$Lambda_true[,1])
plot(res$Lambda_save[,,100] %*% res$eta_save[,,100], Y)
plot(res$Lambda_save[,,100] %*% res$eta_save[,,100], dat$Y)
res$norm_rescale
plot(res$Lambda_save[,,100] %*% res$eta_save[,,100]/res$norm_rescale, dat$Y)
plot(res$Lambda_save[,1,1]/res$norm_rescale); lines(dat$Lambda_true[,1])
plot_matrix <- function(A){
library(reshape2)
library(ggplot2)
P<-nrow(A)
longData<-cbind(which(!is.na(A),arr.ind = TRUE),as.vector(A))
longData<-as.data.frame(longData)
colnames(longData) <- c("row", "col", "value")
ggplot(longData, aes(x = col, y = row)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0) +
labs(title="Matrix entries") + theme_bw() +
theme_minimal() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11)) +
scale_x_continuous(breaks=1:12) + scale_y_reverse(breaks=12:1)
}
plot_matrix(res$Lambda_save)
plot_matrix(res$Lambda_save[,,1])
plot_matrix(res$Lambda_save[,,1]/res$norm_rescale)
plot_matrix(dat$Lambda_true)
plot_matrix(dat$Theta_true)
plot_matrix(res$Theta_save[,,1])
plot(dat$Theta_true[,1],res$Theta_save[,,1])
plot(dat$Theta_true[,1],res$Theta_save[,1,1])
plot(dat$eta_true[,1], res$eta_save[,1,1])
plot(dat$eta_true[,1], res$eta_save[1,,1])
plot(dat$eta_true[1,], res$eta_save[1,,1])
plot(dat$Theta_true[,1],res$Theta_save[,1,1])
tmp = get_best_fit(eta_true=dat$eta_true, eta=res$eta_save, Lambda_true=dat$Lambda_true, Lambda=res$Lambda_save, Theta_true=dat$Theta_true, Theta=res$Theta_save, is_bsssfa=T)
tmp$Lambda[,1]
plot(dat$Lambda_true[,1],tmp$Lambda[,1])
plot(dat$Lambda_true,tmp$Lambda)
plot(dat$Lambda_true[,1], type="l");points(tmp$Lambda[,1])
plot(dat$Lambda_true[,1], type="l");points(tmp$Lambda[,1]/res$norm_rescale)
k=2; plot(dat$Lambda_true[,k], type="l");points(tmp$Lambda[,k]/res$norm_rescale)
k=3; plot(dat$Lambda_true[,k], type="l");points(tmp$Lambda[,k]/res$norm_rescale)
eta_true=dat$eta_true
eta=res$eta_save
Lambda_true=dat$Lambda_true
Lambda=res$Lambda_save
Theta_true=dat$Theta_true
Theta=res$Theta_save
if( nrow(eta_true)>1 ){ # If K>1.
# Figure out the correlation between pairwise correlations of eta_true and eta
K = nrow(eta_true)
cor_mat = matrix(NA,nrow=K,ncol=K)
rownames(cor_mat) = 1:K
for(k_true in 1:K){
et_tru = c(eta_true[k_true,])
for(k_mod in 1:K){
if(is_bsssfa){
et_mod = apply(eta[k_mod,,],1,mean)
} else{ et_mod = c(eta[k_mod,]) }
cor_mat[k_true, k_mod] = cor(et_tru,et_mod)
}
}
# Get estimates for BSSSFA model if necessary
if(is_bsssfa){
eta_tmp = matrix(NA,nrow=nrow(eta_true),ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=ncol(Lambda_true))
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=ncol(Theta_true))
for(k_mod in 1:K){
eta_tmp[k_mod,] = apply(eta[k_mod,,],1,mean)
Lambda_tmp[,k_mod] = apply(Lambda[,k_mod,],1,mean)
Theta_tmp[,k_mod] = apply(Theta[,k_mod,],1,mean)
}
eta = eta_tmp; Lambda = Lambda_tmp; Theta = Theta_tmp
}
# Now get indices for re-indexing
new_mod_ind = rep(NA,K)
for(k in 1:K){
max_ind = which(abs(cor_mat) == max(abs(cor_mat)), arr.ind=TRUE)
# max_ind[1] is the TRUE k, max_ind[2] is the best fitting model k
new_mod_ind[max_ind[1]] = max_ind[2]
# Change sign of each vector if necessary
eta[max_ind[2],] = sign(cor_mat[max_ind]) * eta[max_ind[2],]
Lambda[,max_ind[2]] = sign(cor_mat[max_ind]) * Lambda[,max_ind[2]]
Theta[,max_ind[2]] = sign(cor_mat[max_ind]) * Theta[,max_ind[2]]
# Set to 0 because now the kth row of eta_true is "done"
cor_mat[max_ind[1],] = 0
cor_mat[,max_ind[2]] = 0
}
# Finally, re-index
eta = eta[new_mod_ind,]
Lambda = Lambda[,new_mod_ind]
Theta = Theta[,new_mod_ind]
} else{
if(is_bsssfa){
eta_tmp = matrix(NA,nrow=nrow(eta_true),ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=ncol(Lambda_true))
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=ncol(Theta_true))
for(k_mod in 1:K){
eta_tmp[k_mod,] = apply(eta[k_mod,,],1,mean)
Lambda_tmp[,k_mod] = apply(Lambda[,k_mod,],1,mean)
Theta_tmp[,k_mod] = apply(Theta[,k_mod,],1,mean)
}
eta = eta_tmp; Lambda = Lambda_tmp; Theta = Theta_tmp
}
if( cor(c(eta_true),c(eta))<0 ){
eta = -eta; Lambda = -Lambda; Theta = -Theta
}
}
is_bsssfa=T
# Figure out the correlation between pairwise correlations of eta_true and eta
K = nrow(eta_true)
cor_mat = matrix(NA,nrow=K,ncol=K)
rownames(cor_mat) = 1:K
for(k_true in 1:K){
et_tru = c(eta_true[k_true,])
for(k_mod in 1:K){
if(is_bsssfa){
et_mod = apply(eta[k_mod,,],1,mean)
} else{ et_mod = c(eta[k_mod,]) }
cor_mat[k_true, k_mod] = cor(et_tru,et_mod)
}
}
cor_mat
# Figure out the correlation between pairwise correlations of eta_true and eta
K_true = nrow(eta_true)
K = nrow(eta)
K_true
K
# Figure out the correlation between pairwise correlations of eta_true and eta
K_tru = nrow(eta_true)
K_mod = nrow(eta)
cor_mat = matrix(NA,nrow=K_tru,ncol=K_mod)
rownames(cor_mat) = 1:K
# Figure out the correlation between pairwise correlations of eta_true and eta
K_tru = nrow(eta_true)
K_mod = nrow(eta)
cor_mat = matrix(NA,nrow=K_tru,ncol=K_mod)
rownames(cor_mat) = 1:K_tru
for(k_true in 1:K_tru){
et_tru = c(eta_true[k_true,])
for(k_mod in 1:K_mod){
if(is_bsssfa){
et_mod = apply(eta[k_mod,,],1,mean)
} else{ et_mod = c(eta[k_mod,]) }
cor_mat[k_true, k_mod] = cor(et_tru,et_mod)
}
}
cor_mat
# Get estimates for BSSSFA model if necessary
if(is_bsssfa){
eta_tmp = matrix(NA,nrow=nrow(eta_true),ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=ncol(Lambda_true))
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=ncol(Theta_true))
for(k_mod in 1:K){
eta_tmp[k_mod,] = apply(eta[k_mod,,],1,mean)
Lambda_tmp[,k_mod] = apply(Lambda[,k_mod,],1,mean)
Theta_tmp[,k_mod] = apply(Theta[,k_mod,],1,mean)
}
eta = eta_tmp; Lambda = Lambda_tmp; Theta = Theta_tmp
}
# Get estimates for BSSSFA model if necessary
if(is_bsssfa){
eta_tmp = matrix(NA,nrow=nrow(eta_true),ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=ncol(Lambda_true))
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=ncol(Theta_true))
for(k_mod in 1:K_mod){
eta_tmp[k_mod,] = apply(eta[k_mod,,],1,mean)
Lambda_tmp[,k_mod] = apply(Lambda[,k_mod,],1,mean)
Theta_tmp[,k_mod] = apply(Theta[,k_mod,],1,mean)
}
eta = eta_tmp; Lambda = Lambda_tmp; Theta = Theta_tmp
}
eta_tmp = matrix(NA,nrow=nrow(eta_true),ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=ncol(Lambda_true))
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=ncol(Theta_true))
dim(eta_true)
eta_tmp = matrix(NA,nrow=K_mod,ncol=ncol(eta_true))
Lambda_tmp = matrix(NA,nrow=nrow(Lambda_true),ncol=K_mod)
Theta_tmp = matrix(NA,nrow=nrow(Theta_true),ncol=K_mod)
for(k_mod in 1:K_mod){
eta_tmp[k_mod,] = apply(eta[k_mod,,],1,mean)
Lambda_tmp[,k_mod] = apply(Lambda[,k_mod,],1,mean)
Theta_tmp[,k_mod] = apply(Theta[,k_mod,],1,mean)
}
eta = eta_tmp; Lambda = Lambda_tmp; Theta = Theta_tmp
# Now get indices for re-indexing
new_mod_ind = rep(NA,K)
# Now get indices for re-indexing
new_mod_ind = rep(NA,K)
k=1
max_ind = which(abs(cor_mat) == max(abs(cor_mat)), arr.ind=TRUE)
max_ind
cor_mat
# max_ind[1] is the TRUE k, max_ind[2] is the best fitting model k
new_mod_ind[max_ind[1]] = max_ind[2]
# Change sign of each vector if necessary
eta[max_ind[2],] = sign(cor_mat[max_ind]) * eta[max_ind[2],]
Lambda[,max_ind[2]] = sign(cor_mat[max_ind]) * Lambda[,max_ind[2]]
Theta[,max_ind[2]] = sign(cor_mat[max_ind]) * Theta[,max_ind[2]]
# Set to 0 because now the kth row of eta_true is "done"
cor_mat[max_ind[1],] = 0
cor_mat[,max_ind[2]] = 0
cor_mat
k=2
max_ind = which(abs(cor_mat) == max(abs(cor_mat)), arr.ind=TRUE)
# max_ind[1] is the TRUE k, max_ind[2] is the best fitting model k
new_mod_ind[max_ind[1]] = max_ind[2]
# Change sign of each vector if necessary
eta[max_ind[2],] = sign(cor_mat[max_ind]) * eta[max_ind[2],]
Lambda[,max_ind[2]] = sign(cor_mat[max_ind]) * Lambda[,max_ind[2]]
Theta[,max_ind[2]] = sign(cor_mat[max_ind]) * Theta[,max_ind[2]]
# Set to 0 because now the kth row of eta_true is "done"
cor_mat[max_ind[1],] = 0
cor_mat[,max_ind[2]] = 0
cor_mat
k=3
max_ind = which(abs(cor_mat) == max(abs(cor_mat)), arr.ind=TRUE)
# max_ind[1] is the TRUE k, max_ind[2] is the best fitting model k
new_mod_ind[max_ind[1]] = max_ind[2]
# Change sign of each vector if necessary
eta[max_ind[2],] = sign(cor_mat[max_ind]) * eta[max_ind[2],]
Lambda[,max_ind[2]] = sign(cor_mat[max_ind]) * Lambda[,max_ind[2]]
Theta[,max_ind[2]] = sign(cor_mat[max_ind]) * Theta[,max_ind[2]]
# Set to 0 because now the kth row of eta_true is "done"
cor_mat[max_ind[1],] = 0
cor_mat[,max_ind[2]] = 0
new_mod_ind
setdiff(1:6,new_mod_ind[1:K_tru])
# Finally, re-index
new_mod_ind = c(new_mod_ind,setdiff(1:K_mod,new_mod_ind))
new_mod_ind
new_mod_ind[!is.na(new_mod_ind)]
new_mod_ind = new_mod_ind[!is.na(new_mod_ind)]
new_mod_ind
eta = eta[new_mod_ind,]
Lambda = Lambda[,new_mod_ind]
Theta = Theta[,new_mod_ind]
plot_matrix(Lambda)
plot_matrix(Theta)
plot_matrix <- function(A){
library(reshape2)
library(ggplot2)
P<-nrow(A)
K<-ncol(A)
longData<-cbind(which(!is.na(A),arr.ind = TRUE),as.vector(A))
longData<-as.data.frame(longData)
colnames(longData) <- c("row", "col", "value")
ggplot(longData, aes(x = col, y = row)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0) +
labs(title="Matrix entries") + theme_bw() +
theme_minimal() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11)) +
scale_x_continuous(breaks=1:K) + scale_y_reverse(breaks=P:1)
}
plot_matrix(Theta)
plot_matrix <- function(A){
library(reshape2)
library(ggplot2)
P<-nrow(A)
K<-ncol(A)
longData<-cbind(which(!is.na(A),arr.ind = TRUE),as.vector(A))
longData<-as.data.frame(longData)
colnames(longData) <- c("row", "col", "value")
ggplot(longData, aes(x = col, y = row)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0) +
labs(title="Matrix entries") + theme_bw() +
theme_minimal() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11)) #+
#scale_x_continuous(breaks=1:K) + scale_y_reverse(breaks=P:1)
}
plot_matrix(Theta)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/display_funcs.R', echo=TRUE)
plot_matrix(Theta)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/display_funcs.R', echo=TRUE)
plot_matrix(Theta,type="Theta")
quantile(1:6, 0.975)
eta_tmp = eta_low = eta_upp = matrix(NA,nrow=K_mod,ncol=ncol(eta_true))
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/performance_funcs.R', echo=TRUE)
res = bs3fa::run_sampler(X=dat$X, Y=dat$Y, K=dat$K+3, J=dat$J+3, nsamps_save=100, burnin=5000,
post_process=T, random_init=F, print_progress=T)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/performance_funcs.R', echo=TRUE)
res_clean = reorder_entries(eta_true=dat$eta_true, eta=res$eta_save,
Lambda_true=dat$Lambda_true, Lambda=res$Lambda_save,
Theta_true=dat$Theta_true, Theta=res$Theta_save)
plot_matrix(res_clean$eta)
plot_matrix <- function(A, type=NULL){
library(reshape2)
library(ggplot2)
P<-nrow(A)
K<-ncol(A)
longData<-cbind(which(!is.na(A),arr.ind = TRUE),as.vector(A))
longData<-as.data.frame(longData)
colnames(longData) <- c("row", "col", "value")
if( type=="Lambda" ){
yLab = "d"; xLab = "k"
} else if( type=="Theta" ){
yLab = "s"; xLab = "k"
} else{
yLab = "p"; xLab = "k"
}
ggplot(longData, aes(x = col, y = row)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0) +
labs(title="Matrix entries") + theme_bw() +
theme_minimal() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11)) +
scale_y_reverse() + ylab(yLab) + xlab(xLab)
#+
#scale_x_continuous(breaks=1:K) + scale_y_reverse(breaks=P:1)
}
plot_matrix(res_clean$eta)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/display_funcs.R', echo=TRUE)
plot_matrix(res_clean$eta)
plot_matrix(res_clean$Lambda)
plot_matrix(res_clean$Theta)
plot_matrix(res_clean$Lambda)
plot_matrix(res_clean$Lambda_low)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/performance_funcs.R', echo=TRUE)
res_clean = reorder_entries(eta_true=dat$eta_true, eta=res$eta_save,
Lambda_true=dat$Lambda_true, Lambda=res$Lambda_save,
Theta_true=dat$Theta_true, Theta=res$Theta_save)
plot_matrix(res_clean$Lambda)
plot_matrix(res_clean$Lambda_low)
dev.off()
plot_matrix(res_clean$Lambda_low)
plot_matrix(res_clean$Lambda)
plot_matrix(res_clean$Lambda_upp)
Lambda_low=res_clean$Lambda_low; Lambda=res_clean$Lambda; Lambda_upp=res_clean$Lambda_upp; Lambda_true = dat$Lambda_true
library(reshape2)
library(ggplot2)
df = as.data.frame(cbind(Lambda_low[,k], Lambda[,k], Lambda_upp[,k], Lambda_true[,k]))
colnames(df) = c("lower 2.5%", "estimate", "upper 97.5%", "truth")
dose=1:nrow(Lambda)/nrow(Lambda)
dose
df = as.data.frame(cbind(dose, Lambda_low[,k], Lambda[,k], Lambda_upp[,k], Lambda_true[,k]))
colnames(df) = c("dose", "lower 2.5%", "estimate", "upper 97.5%", "truth")
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), colour = 'black') +
geom_line(aes(y = ll), colour = 'black')+
geom_line()
df = as.data.frame(cbind(dose, Lambda_low[,k], Lambda[,k], Lambda_upp[,k], Lambda_true[,k]))
colnames(df) = c("dose", "ll", "est", "ul", "truth")
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), colour = 'black') +
geom_line(aes(y = ll), colour = 'black')+
geom_line()
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), colour = 'black') +
geom_line(aes(y = ll), colour = 'black')+
geom_line() + geom_line(aes(y = truth), lty = 2, colour = 'red')
Lambda_true = Lambda_true*res$norm_rescale
library(ggplot2)
df = as.data.frame(cbind(dose, Lambda_low[,k], Lambda[,k], Lambda_upp[,k], Lambda_true[,k]))
colnames(df) = c("dose", "ll", "est", "ul", "truth")
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), colour = 'black') +
geom_line(aes(y = ll), colour = 'black')+
geom_line() + geom_line(aes(y = truth), lty = 2, colour = 'red')
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 2, colour = 'black') +
geom_line(aes(y = ll), lty = 2, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red')
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 2, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red')
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red')
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("value")
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("loading")
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("loading") + ggtitle(paste("Column",k,"of loading matrix for Y"))
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("loading") + ggtitle(paste("Column",k,"of loadings matrix for Y"))
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("loading") + ggtitle(paste("Column",k,"of loadings matrix for Y")) +
theme_bw() + theme_minimal()
ggplot(data = df, aes(dose, est)) +
geom_ribbon(aes(x=dose, ymax=ll, ymin=ul), fill="grey", alpha=.5) +
geom_line(aes(y = ul), lty = 3, colour = 'black') +
geom_line(aes(y = ll), lty = 3, colour = 'black')+
geom_line(lty = 2) + geom_line(aes(y = truth), colour = 'red') +
ylab("loading") + ggtitle(paste("Column",k,"of loadings matrix for Y")) +
theme_minimal() + theme_bw()
plot_Lambda(Lambda_low=res_clean$Lambda_low, Lambda=res_clean$Lambda, Lambda_upp=res_clean$Lambda_upp,
Lambda_true = dat$Lambda_true, k=1)
source('~/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa/R/display_funcs.R', echo=TRUE)
plot_Lambda(Lambda_low=res_clean$Lambda_low, Lambda=res_clean$Lambda, Lambda_upp=res_clean$Lambda_upp,
Lambda_true = dat$Lambda_true, k=1)
plot_Lambda(Lambda_low=res_clean$Lambda_low, Lambda=res_clean$Lambda, Lambda_upp=res_clean$Lambda_upp,
Lambda_true=dat$Lambda_true*res$norm_rescale, k=1)
plot_Lambda(Lambda_low=res_clean$Lambda_low, Lambda=res_clean$Lambda, Lambda_upp=res_clean$Lambda_upp,
Lambda_true=dat$Lambda_true*res$norm_rescale, k=2)
plot_Lambda(Lambda_low=res_clean$Lambda_low, Lambda=res_clean$Lambda, Lambda_upp=res_clean$Lambda_upp,
Lambda_true=dat$Lambda_true*res$norm_rescale, k=3)
scaled_X = t(scale(t(dat$X)))
# IN RSTUDIO
library(Rcpp)
library(tools)
setwd("/Users/Kelly/toxic/papers/dim_reduction/code/bayesian_sssfa/bs3fa")
remove.packages("bs3fa")
